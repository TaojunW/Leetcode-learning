Leetcode problem 5: Longest Palindromic Substring
1. Add "#" between each of the char, make the string has odd number.
Example: 2 3 4 5 4 3 1 2   num=8
=>      #2#3#4#5#4#3#1#2#  num=17

2. Calculate the max length of each char
Example: String: #2#3#4#5#4#3#1#3#
         len:    12121216121214121
         explain: first "#", only have itself, len equals to 1;
                  second "2", it has "#2#", len equals to 2;
                  the max len "5", it has "#3#4#5#4#3#", len equals to 6;
We can also find out that, the answer of original string is "3 4 5 4 3", which is (max len-1).
 
3. Set the max right edge = mx_right, and the center of max_length substring = id. 
We can find out that: mx_right=id+len(id)
Example: number "1" has len = 4, mx_right="#" which is string[17] + 1 =18. 
         id=14, len=4, max_right= 14 + 4 = 18.
         nnumber "5" has len = 6, max_right=12, id=8

4. We calcuate the len & mx_right (i=0 , i<string.size, i++), if mx_right > i, which means here we all still in the substring which has max length.
Then we can know the lower-bound of len(i) is MIN(len(2*id-1) , mx_right-1), due to symmetry. If mx_right <= i, we just set the lower-bound = 1.

5. After known the lower-bound of len(i), we can compare the char near i to find the upper-bound.
While(string[i+len[i]] == string[i-len[i]])
     len[i]++;

6. Update the id and mx_right when (i+len[i] > max_right).
     
